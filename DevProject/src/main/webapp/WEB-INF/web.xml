<?xml version="1.0" encoding="UTF-8"?>
<web-app version="3.1" xmlns="http://java.sun.com/xml/ns/javaee"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://java.sun.com/xml/ns/javaee https://java.sun.com/xml/ns/javaee/web-app_3_1.xsd">

	<!-- The definition of the Root Spring Container shared by all Servlets and Filters -->
	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>/WEB-INF/spring/root-context.xml</param-value>
	</context-param>
	
	<!-- Creates the Spring Container shared by all Servlets and Filters -->
	<listener>
		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
	</listener>

	<!-- Processes application requests -->
	<servlet>
		<servlet-name>appServlet</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		<init-param>
			<param-name>contextConfigLocation</param-name>
			<param-value>/WEB-INF/spring/appServlet/servlet-context.xml</param-value>
		</init-param>
		<load-on-startup>1</load-on-startup>
		
		<!-- web.xml의 설정은 was(tomcat) 자체 설정일뿐입니다.
			multipart-config : 메모리 사이즈, 업로드파일 저장위치, 최대크기설정,
			- location : 저장될 디렉토리 (필수)
			- max-file-size : 업로드파일 최대크기(기본값 :  -1L, 제한이없다)
			- max-request-size : 한번요청시 업로드파일 최대크기
			- file-size-threshold : 설정크기가 넘는경우 임시 디렉토리에 저장(기본값:0, 설정하지않는 한 무조건 저장)
			
			web.xml에서 설정하지않을때는 @multipartConfig 어노테이션으로도 설정이 가능하다.
			(요청 받는 컨트롤러에 설정이 가능하다. 메소드라인이 아니라 컨트롤러라인에 설정한다.)
			
			@Multipartconfig(
				location="D:\\upload",
				maxFileSize = "24681474",
				maxRequestSize = "485627218",
				fileSizeThreshole = "154812744"
				)
				
				임시팡일이 저장되는 경로는 아래와 같다.
				- C:\Users\PC-12\AppData\Local\Temp
		
		
		 -->
<!-- 		<multipart-config> -->
<!-- 			<location>c:\\upload</location> -->
<!-- 			<max-file-size>20971520</max-file-size> -->
<!-- 			<max-request-size>41943040</max-request-size> -->
<!-- 			<file-size-threshold>20971520</file-size-threshold> -->
<!-- 		</multipart-config> -->
	</servlet>
		
	<servlet-mapping>
		<servlet-name>appServlet</servlet-name>
		<url-pattern>/</url-pattern>
	</servlet-mapping>
	
<!-- 
	한글처리를 위한 UTF-8필터 등록
	JSP나 서블릿 처리할때마다 넘겨받은 request,response를 setEncoding으로 UTF-8설정했떤 걸 필터로 대체

 -->

	<filter>
		<filter-name>encodingFilter</filter-name>
		<filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
		<init-param>
			<param-name>encoding</param-name>
			<param-value>UTF-8</param-value>
		</init-param>
	</filter>
	<filter-mapping>
		<filter-name>encodingFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>
	
<!--
	MultipartFilter 적용 :파일업로드를 위한 필터 적용  
	 - MultipartFilter 의 역할은 들어온 요청이 multipart/form-data 유형의 요청인지를 확인하여
	 multipart형태의 요청이면  MultipartResolver 를 통해 multipart요청을 확인합니다.
	 그리고 해당 요청이 적절한 요청이면 multipartHttpServletRequest로 랩핑합니다.
	  - MultipartFilter의 기본 빈이름은 'filterMultipartResolver'이다.

-->

	<filter>
		<filter-name>MultiparFilter</filter-name>
		<filter-class>org.springframework.web.multipart.support.MultipartFilter</filter-class>
	</filter>
	<filter-mapping>
		<filter-name>MultiparFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>
</web-app>
