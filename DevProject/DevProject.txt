[1장. 스프링개발환경]

 JDK1.8, Tomcat 8.5.x, oracle11g xe
 
 [2장. 프로젝트 생성]
 
 	스프링 MVC구조
 		1. 스프링 MVC구조
 			스프링 MVC는 DispatcherServlet, View Resolver, Handler, View등으로 구성되어있따.
 			
 		2. 스프링 MVC 프로젝트 생성
 			Spring Legacy Project(Spring mvc project template) 생성
 			프로젝트 명 : DevProject (본인이 하고싶은 프로젝트명)
 			template : Spring Mvc Project
 			package : kr.or.ddit(여기서 설정하는 패키지는 프로젝트의 basePackage경로가 된다.)
 			
 		3. MVC 프로젝트 파일 구성
 			프로젝트를 새로 구성하면 관련 파일들과 폴더들이 자동으로 생성된다.
 			[구성요소] 
 			-pom.xml													: 메이븐 프로젝트 빌드경로
 			-src/main/java												: 자바 소스경로	
 			-src/main/resources											: 리소스 파일 경로
 			-src/.../WEB-INF/web.xml									: 웹컨테이너 설정파일
 			-src/.../WEB_INF/root-context.xml							: 스프링 설정 파일
 			-src/.../WEB-INF/spring/appServlet/servlet-context.xml		: 스프링 웹설정 파일
 			-src/.../WWB_INF/view 										: 뷰파일경로	
 			
 			
 			
 		4. 로그 레벨 설정
 			-log4j구성요소
 			
 					요소				| 			설명
 		------------------------------------------------------------------------------------------------
 				LOGGER 					|	출력할 메시지를 Appender에 전달한다.
 				APPENDER				|	전달된 로그를 어디에 출력할 지 결정한다.(콘솔출력, 파일로그, DB저장 등)
 				LAYOUT					|	로그를 어떤 형식으로 출력할 지 결정한다.
 		--------------------------------------------------------------------------------------------------
 		
 		LOG4J레벨
 		
 		출력레벨에 따라 설정레벨 이상의 로그가 출력된다.
 		
 				로그레벨				|		설명	
 		---------------------------------------------------------------------------------------------------------
 			FATAL 						| 아주 심각한 에러가 발생한 상태를 나타낸다
 			ERROR 						| 어떠한 요청을 처리하는 중 문제가 발생한 상태를 나타낸다.
 			WARN						| 프로그램의 실행에는 문제가 없지만, 향후 시스템 에러의 원인이 될수있는 경고성 메시지를 나타낸다.
 			INFO 						| 어떠한 상태변경과 같은 정보성 메시지를 나타낸다.
 			DEBUG						| 개발시 디버그 용도로 사용하는 메시지를 나타낸다.
 			TRACE 						| 디버그 레벨이 너무 광범위한것을 해결하기 위해서 좀더 상세한 이벤트를 나타낸다.
 		---------------------------------------------------------------------------------------------------------------
 		
 		스프링2 진행 내용
 		
 		개발 시 사용하고 있는STS는 3.9.15.REALESE버전에 해당하며, 이클립스 E4.16버전에 해당한다.
 		다양한 STS버전들이 존재하지만, 우리가 사용하는 JDK1.8버전과 SPRING FRAMEWORK호환성의 문제가 가장 적은 
 		3/9/15버전을 선택해 사용중
 		
 		1.STS 3.9.15 TOOL설치 후 실행
 		2. workspace설정 후 STS 진입
 		3. enc,font설정
 			> enc는 UTF-8설정
 			> font는 본인이 원하는 폰트설정
 		4. 웹서버 실행환경 설정
 			> window > preferences > server > runtime Environments
 			> 기존 등록되어있는 VM서버 설정은 삭제
 			> 우리가 사용하고자하는 apache - tomcat 8.5v으로 설정
 			> add버튼 클릭 후  ,  tomcat 추가
 			> 추가시, tomcat 폴더까지 선택 후 추가(사용 jdk로설정)
 			
 		5. eclipse java설정
 			> window >  preferences > java > installed JRES
 			> 기존 JRE는삭제
 			> 우리가 사용하고있는 버전의 JDK 폴더를 찾아서 bin폴더 선택 후 추가		
 			
 			
 		6. 스프링 MVC 프로젝트 생성
 			> Spring legacy project 생성
 			> 프로젝트명, 패키지, template선택 후 진행
 				프로젝트명 : DevProject
 				패키지 : kr.or.ddit
 				template: Spring MVC Project
 		
 		7. MVC 프로젝트 파일 구성하기
 			>web.xml, pom.xml, root-context/sevlet-context.xml, webapp등등 관련파일이 존재하는지를 확인한다.
 			> 간혹 MVC project가 잘못 생성되어 관련 파일들이 여러개 누락되는 경우가 있으니 꼭 확인하고 진행한다.
 		
 		8. 웹서버 설정 변경하기
 			> server의 overview > timeout120초 설정 /port 80 설정
 		
 		9. 개발환경 버전 변경
 			> pom.xml 변경
 			> dependency 중, servlet api에 해당하는 버전과 artipactid 를 변경한다.
 				>artipactid : javax.servlet-api
 				> version : 3.1.0
 			> java - version 과 springframewort 버전을 변경한다.
 				>java : 1.8
 				> springframewort : 5.3.25
 				
 		*** pom.xml을 변경했다면 해당 프로젝트에 maven 설정을 반영하도록 한다.
 			> 프로젝트 우클릭 > run-as > maven clean후 maven build를 진행한다.(Goals : compile)		
 			>web.xml 변경
 			> 서블릿 버전의 대한 설정 2.5/2_5 설정을 3.1/3_1로 변경한다.
 		
 			>프로젝트ㅡ 환경 설정 버전 변경
 				> java build path : jdk추가(사용하고있는 1.8버전으로)
 				
 				>3대장 추가한다.(서버, jresystem, maven)
 				>projectfacets : java 1.8 설정, dynamic web module 3.1로 설정
 				 > runtime 탭의 server 체크 후 apply
 		10. 로그레벨 설정하기
 			> log4j.xml 의 root-level을 debug 로 변경한다.
 					 	
 						 							